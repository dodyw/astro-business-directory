---
import Layout from '../layouts/Layout.astro';
import BusinessList from '../components/BusinessList.astro';
import type { Category } from '../types';

export async function getStaticPaths() {
  const categoryResponse = await fetch('http://localhost:4321/categories.json');
  const categoryData = await categoryResponse.json();
  const categories = categoryData.categories;

  function generatePaths(categories: Category[], parentPath: string = ''): any[] {
    return categories.flatMap(category => {
      const currentPath = `${parentPath}${parentPath ? '/' : ''}${category.id}`;
      const paths = [{
        params: { category: currentPath },
        props: { category, breadcrumb: currentPath.split('/') }
      }];

      if (category.subcategories) {
        paths.push(...generatePaths(category.subcategories, currentPath));
      }

      return paths;
    });
  }

  return generatePaths(categories);
}

const { category, breadcrumb } = Astro.props;

async function getBreadcrumbName(id: string): Promise<string> {
  const findCategory = (categories: Category[], id: string): Category | undefined => {
    for (const cat of categories) {
      if (cat.id === id) return cat;
      if (cat.subcategories) {
        const found = findCategory(cat.subcategories, id);
        if (found) return found;
      }
    }
  };

  const categoryResponse = await fetch('http://localhost:4321/categories.json');
  const categoryData = await categoryResponse.json();
  const categories = categoryData.categories;

  const foundCategory = findCategory(categories, id);
  return foundCategory ? foundCategory.name : id;
}
---

<Layout title={category.name}>
  <div class="breadcrumb">
    <a href="/">Home</a>
    {breadcrumb.map(async (crumb: string, index: number) => (
      <span>
        &gt; <a href={`/${breadcrumb.slice(0, index + 1).join('/')}`}>{await getBreadcrumbName(crumb)}</a>
      </span>
    ))}
  </div>
  <h2>{category.name} Businesses</h2>
  <BusinessList category={category.id} />
</Layout>

<style>
  h2 {
    color: var(--primary-color);
    margin-bottom: 1rem;
  }

  .breadcrumb {
    margin-bottom: 1rem;
    font-size: 0.9rem;
  }

  .breadcrumb a {
    color: var(--secondary-color);
    text-decoration: none;
  }

  .breadcrumb a:hover {
    text-decoration: underline;
  }
</style>